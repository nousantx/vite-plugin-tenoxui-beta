{"version":3,"file":"index.es.js","sources":["../src/plugin/utils/classNameExtractor.js","../src/plugin/index.js"],"sourcesContent":["// new - classNameExtractor.js\nimport Ngurai from 'nguraijs'\nimport { TenoxUI, constructRaw } from 'tenoxui'\n\nexport class Extractor {\n  constructor({ css = { property: { bg: 'background' } }, rules = [] } = {}) {\n    this.config = rules\n    this.cssConfig = css\n    this.core = new TenoxUI(this.cssConfig)\n  }\n\n  setConfig({ css = {}, rules = [] } = {}) {\n    this.config = rules\n    this.cssConfig = css\n    this.core = new TenoxUI(css)\n    return this\n  }\n\n  process(code) {\n    try {\n      const { all, prefix, type } = this.core.main.regexp(\n        Object.keys(this.cssConfig.aliases || {}) || []\n      )\n\n      const nx = new Ngurai({\n        customOnly: true,\n        noUnknownToken: true,\n        noSpace: true,\n        custom: {\n          className: [\n            new RegExp(`!?${all.slice(1, -1)}`),\n            new RegExp(`!?(?:(${prefix}):)?${type}`),\n            ...this.config.map((reg) => {\n              const source = reg.source\n              return new RegExp(`!?${source}`, reg.flags)\n            })\n          ]\n        }\n      })\n\n      const classNames = [\n        ...new Set(\n          nx\n            .process(code)\n            .flatMap((line) => line.filter((token) => token.type === 'className'))\n            .map((token) => token.value)\n        )\n      ]\n\n      return classNames.length > 0\n        ? this.core\n            .process(classNames)\n            .map(\n              (i) =>\n                (i.isImportant ? '!' : '') +\n                (i.rules ? constructRaw(i.raw[0], i.raw[1], '', '') : i.raw[6])\n            )\n        : []\n    } catch (error) {\n      console.error('Error extracting class names:', error)\n      return []\n    }\n  }\n}\n","import fs from 'node:fs'\nimport fg from 'fast-glob'\nimport path from 'node:path'\nimport { pathToFileURL } from 'node:url'\nimport { createFilter } from '@rollup/pluginutils'\nimport { Extractor } from './utils/classNameExtractor.js'\nimport { TenoxUI } from 'tenoxui'\n\nconst WS_EVENT_PREFIX = 'hmr:tenoxui'\nconst VIRTUAL_MODULE_ID = 'virtual:tenoxui:dev'\nconst RESOLVED_VIRTUAL_MODULE_ID = '\\0' + VIRTUAL_MODULE_ID\nconst VIRTUAL_MODULE_ID_BUILD = 'virtual:tenoxui.css'\nconst RESOLVED_VIRTUAL_MODULE_ID_BUILD = '\\0' + VIRTUAL_MODULE_ID_BUILD\n\nexport default function Txoo() {\n  let config\n  let includeFilter = () => true\n  let tenoxui = null\n  let extractor = new Extractor()\n  const configPath = path.resolve('tenoxui.config.js')\n\n  async function loadConfig() {\n    try {\n      if (fs.existsSync(configPath)) {\n        const configURL = pathToFileURL(configPath).href + `?t=${Date.now()}`\n        const data = await import(configURL)\n        config = data.default || data\n        tenoxui = new TenoxUI(config.css)\n        extractor.setConfig({ css: config.css })\n        const { include, exclude } = config\n        includeFilter = createFilter(include, exclude)\n      } else {\n        console.warn('⚠️ Config file not found, using empty config')\n        config = {}\n        includeFilter = () => true\n      }\n    } catch (error) {\n      console.error('❌ Error loading framework config:', error)\n      config = {}\n    }\n  }\n\n  let MODES\n  let css = ''\n  let servers = []\n\n  const allClassNames = new Set()\n\n  function generateCSS() {\n    if (!tenoxui) return ''\n    const styles = tenoxui.render(config.css?.apply || {}, Array.from(allClassNames))\n    return styles\n  }\n\n  async function scanAllFiles() {\n    allClassNames.clear()\n    const files = await fg(config.include || [], {\n      ignore: config.exclude || []\n    })\n\n    for (const file of files) {\n      const content = fs.readFileSync(file, 'utf-8')\n      const classNames = extractor.process(content)\n      for (const name of classNames) {\n        allClassNames.add(name)\n      }\n    }\n  }\n\n  function sendCSSUpdate(newCSS) {\n    for (const server of servers) {\n      server.ws.send({\n        type: 'custom',\n        event: WS_EVENT_PREFIX,\n        data: newCSS\n      })\n    }\n  }\n\n  return [\n    {\n      name: 'tenoxui:global',\n      configResolved(_config) {\n        MODES = _config.command\n      },\n      async buildStart() {\n        await loadConfig()\n        await scanAllFiles()\n        css = generateCSS()\n      }\n    },\n    {\n      name: 'tenoxui:dev',\n      resolveId(id) {\n        if (id === VIRTUAL_MODULE_ID) return RESOLVED_VIRTUAL_MODULE_ID\n      },\n      load(id) {\n        if (id === RESOLVED_VIRTUAL_MODULE_ID) {\n          if (MODES === 'serve') {\n            return `import { updateStyle, removeStyle } from '/@vite/client'\n\nconst id = ${JSON.stringify(VIRTUAL_MODULE_ID)};\nlet currentCSS = '';\n\n// Fetch current CSS from server\nasync function getCurrentCSS() {\n  try {\n    const response = await fetch('/__tenoxui_css__');\n    return await response.text();\n  } catch (e) {\n    console.warn('[tenoxui] Failed to fetch CSS:', e);\n    return '';\n  }\n}\n\n// Initialize styles\ngetCurrentCSS().then(css => {\n  currentCSS = css;\n  updateStyle(id, css);\n});\n\nif (import.meta.hot) {\n  import.meta.hot.on('${WS_EVENT_PREFIX}', (newCSS) => {\n    currentCSS = newCSS;\n    updateStyle(id, newCSS);\n  });\n  \n  import.meta.hot.accept(() => {\n    // Accept updates\n  });\n  \n  import.meta.hot.prune(() => {\n    removeStyle(id);\n  });\n}\n\nexport default {};\n`\n          }\n          return ''\n        }\n      },\n      async configureServer(server) {\n        servers.push(server)\n        server.watcher.add(configPath)\n        server.middlewares.use('/__tenoxui_css__', async (req, res, next) => {\n          if (req.method === 'GET') {\n            await loadConfig()\n            await scanAllFiles()\n            res.setHeader('Content-Type', 'text/plain')\n            res.setHeader('Cache-Control', 'no-cache')\n            res.end(generateCSS())\n          } else {\n            next()\n          }\n        })\n\n        server.watcher.on('change', (file) => {\n          if (file === configPath) {\n            console.warn('TenoxUI config file changed, reloading...')\n            server.ws.send({ type: 'full-reload' })\n          }\n          if (includeFilter(file)) {\n            const content = fs.readFileSync(file, 'utf-8')\n            const classNames = extractor.process(content)\n            for (const name of classNames) {\n              allClassNames.add(name)\n            }\n            css = generateCSS()\n            sendCSSUpdate(css)\n          }\n        })\n      }\n    },\n    {\n      name: 'tenoxui:build',\n      resolveId(id) {\n        if (id === VIRTUAL_MODULE_ID_BUILD) return RESOLVED_VIRTUAL_MODULE_ID_BUILD\n      },\n      load(id) {\n        if (id === RESOLVED_VIRTUAL_MODULE_ID_BUILD) {\n          if (MODES === 'build') {\n            return css\n          }\n          return '/* nothing to do :3 */'\n        }\n      }\n    }\n  ]\n}\n"],"names":["Extractor","css","rules","TenoxUI","code","all","prefix","type","nx","Ngurai","reg","source","classNames","line","token","i","constructRaw","error","WS_EVENT_PREFIX","VIRTUAL_MODULE_ID","RESOLVED_VIRTUAL_MODULE_ID","VIRTUAL_MODULE_ID_BUILD","RESOLVED_VIRTUAL_MODULE_ID_BUILD","Txoo","config","includeFilter","tenoxui","extractor","configPath","path","loadConfig","fs","data","pathToFileURL","include","exclude","createFilter","MODES","servers","allClassNames","generateCSS","_a","scanAllFiles","files","fg","file","content","name","sendCSSUpdate","newCSS","server","_config","id","req","res","next"],"mappings":"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"}